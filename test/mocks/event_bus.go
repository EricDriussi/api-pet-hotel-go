// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	eventbus "github.com/EricDriussi/api-pet-hotel-go/internal/shared/event_bus"
	mock "github.com/stretchr/testify/mock"
)

// EventBus is an autogenerated mock type for the EventBus type
type EventBus struct {
	mock.Mock
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *EventBus) Publish(_a0 context.Context, _a1 []eventbus.Event) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []eventbus.Event) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *EventBus) Subscribe(_a0 eventbus.Type, _a1 eventbus.Subscriber) {
	_m.Called(_a0, _a1)
}

type mockConstructorTestingTNewEventBus interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventBus creates a new instance of EventBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventBus(t mockConstructorTestingTNewEventBus) *EventBus {
	mock := &EventBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
