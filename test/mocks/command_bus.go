// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	commandbus "github.com/EricDriussi/api-pet-hotel-go/internal/shared/command_bus"

	mock "github.com/stretchr/testify/mock"
)

// CommandBus is an autogenerated mock type for the CommandBus type
type CommandBus struct {
	mock.Mock
}

// Dispatch provides a mock function with given fields: _a0, _a1
func (_m *CommandBus) Dispatch(_a0 context.Context, _a1 commandbus.Command) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commandbus.Command) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *CommandBus) Register(_a0 commandbus.Type, _a1 commandbus.Handler) {
	_m.Called(_a0, _a1)
}

type mockConstructorTestingTNewCommandBus interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommandBus creates a new instance of CommandBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommandBus(t mockConstructorTestingTNewCommandBus) *CommandBus {
	mock := &CommandBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
